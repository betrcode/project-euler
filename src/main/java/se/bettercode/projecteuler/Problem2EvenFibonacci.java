package se.bettercode.projecteuler;

import java.util.ArrayList;
import java.util.List;

/**
 * Created by max on 2016-06-23.
 * <p>
 * Even Fibonacci numbers
 * Problem 2
 * Each new term in the Fibonacci sequence is generated by adding the previous two terms.
 * By starting with 1 and 2, the first 10 terms will be:
 * <p>
 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 * <p>
 * By considering the terms in the Fibonacci sequence whose values do not exceed four million,
 * find the sum of the even-valued terms.
 */
public class Problem2EvenFibonacci {

  public static int sumOfEvenFibonacciBelowLimit(int limit) {
    return generateFibonacciNumbers(limit).stream()
        .filter(number -> number % 2 == 0)
        .mapToInt(Integer::intValue)
        .sum();
  }

  //TODO: Make into a Stream instead?
  private static List<Integer> generateFibonacciNumbers(int limit) {
    List<Integer> fibs = new ArrayList<>(100);
    fibs.add(1);
    fibs.add(2);

    while (true) {
      int maxIndex = fibs.size() - 1;
      int newFib = fibs.get(maxIndex) + fibs.get(maxIndex - 1);
      if (newFib > limit) {
        break;
      }
      fibs.add(newFib);
    }
    return fibs;
  }


}
